# TO-DO LIST PER IL PROGETTO DI GESTIONE PAGAMENTI

## Configurazione e Setup iniziale
- [x] Creare l'ambiente di sviluppo (Python venv in .cal)
- [x] Impostare un sistema di controllo versione (Git)
- [x] Configurare l'accesso all'API di Telegram Bot (token in .env)
- [x] Configurare l'accesso al calendario Nextcloud (credenziali in .env, test in nextcloud_connect_test.py)
- [x] Progettare e creare lo schema del database

## Implementazione Database
- [x] Scegliere il database (SQLite)
- [x] Creare tabella 'pagamenti'
- [x] Creare tabella 'lezioni'
- [x] Creare tabella 'associazioni'
- [x] Creare tabella 'pagamenti_lezioni'
- [x] Configurare indici appropriati
- [x] Creare script di inizializzazione/migrazione DB (db_create_schema.py)

## Sviluppo componente 1: Ingestore Pagamenti
- [x] Implementare connessione API Telegram (Telethon User API)
- [x] Configurare autenticazione Telegram (API_ID, API_HASH, phone, password)
- [x] Sviluppare logica di parsing dei messaggi da Telegram (regex per SMS banca russa)
- [x] Implementare meccanismo di estrazione dati (nome_pagante, giorno, ora, somma)
- [x] Creare sistema di deduplicazione basato su message ID (fonte_msg_id unique)
- [x] Implementare inserimento/aggiornamento nel DB con stato='sospeso'
- [x] Creare whitelist mittenti validi (mittenti_whitelist.csv)
- [x] Implementare filtro per escludere pagamenti da non-studenti
- [x] Gestire parsing importi con spazi (es. "10 000")
- [ ] Aggiungere logging appropriato
- [ ] Creare unit test

## Sviluppo componente 2: Risolutore di Associazioni
- [ ] Implementare connessione a Nextcloud per leggere il calendario "lezioni"
- [ ] Sviluppare logica per estrarre nome_studente e dettagli lezione
- [ ] Implementare sistema di ricerca nelle associazioni esistenti
- [ ] Creare meccanismo per generare scelte multiple su Telegram (inline keyboard)
- [ ] Implementare callback handler per le selezioni utente
- [ ] Sviluppare logica per aggiornare associazioni e pagamenti
- [ ] Aggiungere logging appropriato
- [ ] Creare unit test

## Sviluppo componente 3: Sincronizzatore Calendari
- [ ] Estendere il codice di nextcloud_connect_test.py per accedere al calendario "lezioni"
- [ ] Sviluppare logica per verificare associazioni e pagamenti disponibili
- [ ] Implementare spostamento o copia+chiusura degli eventi nel calendario "pagate"
- [ ] Creare sistema per gestire pagamenti consumati/residui
- [ ] Implementare gestione degli errori e mismatch
- [ ] Sviluppare meccanismo di notifica su Telegram
- [ ] Aggiungere logging appropriato
- [ ] Creare unit test

## Struttura del Progetto
- [ ] Organizzare il codice in moduli/package appropriati
- [ ] Creare file di requirements.txt con le dipendenze
- [ ] Impostare struttura di configurazione (config.py)
- [ ] Creare script principali per ciascun componente

## Pianificazione ed Orchestrazione
- [ ] Configurare scheduler per eseguire i componenti in sequenza
- [ ] Impostare orari corretti (8:00, 8:02, 8:05 MSK)
- [ ] Gestire configurazione del fuso orario
- [ ] Implementare controlli di dipendenza tra componenti

## Documentazione
- [ ] Documentare API e interfacce
- [ ] Creare documentazione per l'utente
- [ ] Documentare procedure di backup/ripristino
- [ ] Creare diagrammi di flusso aggiornati

## Testing e QA
- [ ] Creare test di integrazione
- [ ] Implementare test di sistema end-to-end
- [ ] Testare scenari di errore e recovery
- [ ] Verificare performance sotto carico

## Monitoring e Manutenzione
- [ ] Implementare dashboard di monitoraggio
- [ ] Configurare sistema di allarmi
- [ ] Creare meccanismo di backup automatico
- [ ] Implementare strumenti di manutenzione DB

## Deployment
- [ ] Preparare ambiente di produzione
- [ ] Configurare deployment automatizzato
- [ ] Implementare strategia di rollback
- [ ] Eseguire migrazione iniziale dati (se necessario)

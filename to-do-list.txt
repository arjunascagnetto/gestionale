# TO-DO LIST PER IL PROGETTO DI GESTIONE PAGAMENTI

## ‚ö° STATO ATTUALE DEL PROGETTO
**Ultima modifica:** 2025-10-10 (v2.1 - Bot con filtri temporali)

### Sistema Operativo ‚úÖ
- ‚úÖ 90+ pagamenti importati da Telegram (tutti in stato 'sospeso')
- ‚úÖ 150+ lezioni sincronizzate da Google Calendar (stato 'prevista')
- ‚úÖ 20 studenti identificati e whitelist attiva
- ‚úÖ Bot Telegram con filtri temporali (SOLO OGGI)
- ‚úÖ Sync automatico lezioni di OGGI ad ogni /process
- ‚úÖ Sistema skip/suspended funzionante per evitare loop
- ‚úÖ Interfaccia Web completa e funzionante con bugfix applicati
- ‚úÖ Gestione abbonamenti (3/5/10 lezioni) e pagamenti parziali
- ‚úÖ Bugfix IntegrityError per doppio click (INSERT ‚Üí UPDATE quota)

### Statistiche Database (aggiornate)
- üìä **Pagamenti**: 90+ totali
- üìä **Lezioni**: 150+ totali
- üìä **Associazioni**: Pronte per essere create
- üìä **Abbinamenti**: Sistema pronto per produzione

### üéØ Bot Telegram - Comportamento Finale (v2.1)
**SOLO OGGI** - Nessun passato, nessun futuro:
- ‚úÖ Mostra SOLO pagamenti di oggi (giorno = date('now'))
- ‚úÖ Mostra SOLO lezioni di oggi (giorno = date('now'))
- ‚úÖ Sync automatico lezioni di oggi ad ogni /process
- ‚úÖ Cancellazione automatica lezioni rimosse dal calendario
- ‚ùå NON mostra pagamenti di ieri o prima
- ‚ùå NON mostra lezioni future

**Esempio concreto (oggi = 10/10/2025):**
```
Bot mostra: pagamenti del 10/10/2025 + lezioni del 10/10/2025
Bot NON mostra: pagamenti del 09/10/2025 (ieri) ‚Üí gestisci via web
```

### Prossimi Passi Immediati
- [ ] Deploy su Linode VPS (produzione)
- [ ] Configurare cron job per sync automatico ogni ora
- [ ] Setup servizi systemd per bot e web interface
- [ ] Configurare Nginx reverse proxy
- [ ] Test workflow completo in produzione

---

## Configurazione e Setup iniziale
- [x] Creare l'ambiente di sviluppo (Python venv in .cal)
- [x] Impostare un sistema di controllo versione (Git)
- [x] Configurare l'accesso all'API di Telegram Bot (token in .env)
- [x] Configurare l'accesso a Google Calendar tramite Service Account
- [x] Creare Service Account su Google Cloud Console
- [x] Condividere calendario "Lezioni Russo" con service account
- [x] Testare accesso e lettura eventi (gcal_connect_test.py)
- [x] Progettare e creare lo schema del database

## Implementazione Database
- [x] Scegliere il database (SQLite)
- [x] Creare tabella 'pagamenti'
- [x] Creare tabella 'lezioni'
- [x] Creare tabella 'associazioni'
- [x] Creare tabella 'pagamenti_lezioni'
- [x] Configurare indici appropriati
- [x] Creare script di inizializzazione/migrazione DB (db_create_schema.py)
- [x] Aggiungere colonna 'skipped' a tabella pagamenti (per gestire loop)

## Sviluppo componente 1: Ingestore Pagamenti (telegram_ingestor.py) ‚úÖ
- [x] Implementare connessione API Telegram (Telethon User API)
- [x] Configurare autenticazione Telegram (API_ID, API_HASH, phone, password)
- [x] Sviluppare logica di parsing dei messaggi da Telegram (regex per SMS banca russa)
- [x] Implementare meccanismo di estrazione dati (nome_pagante, giorno, ora, somma)
- [x] Creare sistema di deduplicazione basato su message ID (fonte_msg_id unique)
- [x] Implementare inserimento/aggiornamento nel DB con stato='sospeso'
- [x] Creare whitelist mittenti validi (mittenti_whitelist.csv)
- [x] Implementare filtro per escludere pagamenti da non-studenti
- [x] Gestire parsing importi con spazi (es. "10 000")
- [x] Aggiungere logging su console e file
- [x] Versione bulk per import storico (telegram_bulk_ingestor.py)

## Sviluppo componente 2: Sincronizzatore Lezioni ‚úÖ
- [x] Implementare connessione a Google Calendar per leggere il calendario "Lezioni Russo"
- [x] Testare lettura eventi con date e orari (gcal_connect_test.py)
- [x] Sviluppare logica per estrarre nome_studente e dettagli lezione
- [x] Implementare inserimento/aggiornamento lezioni nel DB (sync_lessons_from_calendar)
- [x] Creare sistema di deduplicazione basato su event_id (nextcloud_event_id UNIQUE)
- [x] Gestire eventi ricorrenti vs singoli (singleEvents=True)
- [x] Filtraggio lezioni solo dal passato fino a oggi (no lezioni future)
- [x] Aggiungere logging appropriato
- [x] Integrato nel bot come comando /sync
- [x] **Versione OGGI: sync_today_lessons_from_calendar() - sync SOLO oggi con DELETE automatico**
- [x] Versione bulk per import storico (gcal_bulk_sync.py)

## Sviluppo componente 3: Risolutore di Associazioni (association_resolver.py) ‚úÖ
- [x] Implementare sistema di ricerca nelle associazioni esistenti
- [x] Sviluppare logica per recuperare lezioni ¬±3 giorni dalla data pagamento ‚Üí **MODIFICATO: SOLO stesso giorno**
- [x] Creare meccanismo per generare scelte multiple su Telegram (inline keyboard)
- [x] Implementare callback handler per le selezioni utente
- [x] Sviluppare logica per salvare associazioni studente-pagante
- [x] Implementare riuso automatico delle associazioni esistenti
- [x] Implementare processing sequenziale (un pagamento alla volta)
- [x] Implementare auto-avanzamento al prossimo pagamento dopo azione utente
- [x] Creare sistema skip/suspended per evitare loop
- [x] Implementare comando /process per pagamenti non-skipped
- [x] Implementare comando /suspended per pagamenti skipped
- [x] Implementare comando /sync per sincronizzare lezioni da Calendar
- [x] Aggiungere logging su file (association_resolver.log)
- [x] Creare utility fuzzy matching (utils/name_matcher.py - attualmente non usato)
- [x] Implementare rilevamento automatico abbonamenti (3/5/10 lezioni)
- [x] Supporto pagamenti parziali per lezioni condivise
- [x] Gestione quota_usata in tabella pagamenti_lezioni
- [x] **Bugfix: Controllo duplicati INSERT ‚Üí UPDATE quota per evitare IntegrityError**
- [x] **Filtri temporali: SOLO pagamenti e lezioni di OGGI**
- [x] **Sync automatico lezioni oggi ad ogni /process**

## Sviluppo componente 4: Interfaccia Web Abbinamento Manuale ‚úÖ
- [x] Creare interfaccia Flask (web_interface/app.py)
- [x] Vista a 2 colonne: lezioni non pagate vs pagamenti disponibili
- [x] Ordinamento indipendente per data crescente/decrescente
- [x] Selezione multipla con checkbox
- [x] Calcolo automatico bilancio crediti-debiti in real-time
- [x] Pulsante CONFERMA ABBINAMENTO (attivo solo se bilancio ‚â• 0)
- [x] Distribuzione automatica pagamenti su lezioni multiple
- [x] Gestione abbonamenti e pagamenti parziali
- [x] Sezione ABBINAMENTI COMPLETATI con pulsante elimina
- [x] Query calcolo residuo pagamenti (COALESCE SUM quota_usata)
- [x] Aggiornamento automatico stato pagamenti
- [x] Salvataggio associazioni studente-pagante
- [x] Gestione errori SQL con try-except e rollback
- [x] Bugfix: INSERT ON CONFLICT per update associazioni
- [x] Bugfix: UPDATE quota_usata per abbinamenti esistenti
- [x] Template HTML con Tailwind CSS
- [x] **Supporto normalizzazione nomi studenti**
- [ ] Aggiungere autenticazione con password
- [ ] Implementare filtri per studente/data

## Struttura del Progetto ‚úÖ
- [x] Organizzare il codice in moduli (telegram_ingestor, association_resolver, web_interface)
- [x] Separare utility in cartella utils/ (name_matcher.py)
- [x] File .env per configurazione credenziali
- [x] File .gitignore per proteggere dati sensibili
- [x] Documentazione completa in file .md
- [ ] Creare file requirements.txt consolidato con tutte le dipendenze

## Documentazione ‚úÖ
- [x] descrizione_progetto.md - Architettura sistema
- [x] SISTEMA_PAGAMENTI.md - Sistema bot + web
- [x] project-status.md - Stato progetto v2.0
- [x] BUGFIX_REPORT.md - Report bugfix web interface
- [x] BUGFIX_REPORT_BOT.md - Report bugfix bot IntegrityError
- [x] BOT_TEMPORAL_FILTERS.md - Report filtri temporali bot
- [x] BULK_IMPORT_README.md - Import dati storici
- [x] web_interface/README.md - Documentazione web interface
- [x] DEPLOYMENT_LINODE.md - Guida deployment VPS
- [x] CLAUDE.md - Log conversazioni Claude Code

## Testing e QA
- [x] Test workflow completo bot Telegram
- [x] Test interfaccia web completa
- [x] Test import bulk pagamenti e lezioni
- [x] Test filtri temporali bot (SOLO OGGI)
- [x] Test sync automatico lezioni oggi
- [ ] Creare test di integrazione automatizzati
- [ ] Test di sistema end-to-end

## Deployment
- [ ] Deploy su Linode VPS (ready - guida completa disponibile)
- [ ] Configurare cron job sync automatico ogni ora
- [ ] Setup servizi systemd (bot + web)
- [ ] Configurare Nginx reverse proxy
- [ ] Setup SSL con Let's Encrypt
- [ ] Configurare backup automatico database

---

## üìã File Documentazione Disponibili

1. **descrizione_progetto.md** - Architettura e design sistema
2. **SISTEMA_PAGAMENTI.md** - Sistema dual (Bot + Web)
3. **project-status.md** - Stato attuale v2.0
4. **to-do-list.txt** - Questo file (task list)
5. **BULK_IMPORT_README.md** - Import storico pagamenti/lezioni
6. **BUGFIX_REPORT.md** - Bugfix web interface (v1.1)
7. **BUGFIX_REPORT_BOT.md** - Bugfix bot IntegrityError
8. **BOT_TEMPORAL_FILTERS.md** - Filtri temporali bot (v2.1)
9. **DEPLOYMENT_LINODE.md** - Guida deployment VPS
10. **web_interface/README.md** - Documentazione web interface
11. **web_interface/BUGFIX_REPORT.md** - Report bugfix web

---

## üöÄ Versioni Release

### v1.0 - Sistema Base (2024-10-09)
- Import pagamenti e lezioni
- Bot Telegram per associazioni
- Interfaccia web completa

### v1.1 - Bugfix e Ottimizzazioni (2024-10-09)
- Bugfix IntegrityError web interface
- Bugfix IntegrityError bot Telegram
- Gestione duplicati con UPDATE quota

### v2.0 - Import Bulk e Normalizzazione (2024-10-09)
- Import bulk pagamenti storici
- Import bulk lezioni storiche
- Normalizzazione nomi studenti
- Sync incrementale Google Calendar

### v2.1 - Filtri Temporali Bot (2024-10-10) ‚≠ê CURRENT
- **Bot mostra SOLO pagamenti e lezioni di OGGI**
- **Sync automatico lezioni oggi ad ogni /process**
- **Cancellazione automatica lezioni rimosse dal calendario**
- Comportamento: se oggi = 10/10/2025 ‚Üí solo dati 10/10/2025
- Storico e futuro ‚Üí Web Interface

---

**Pronto per deployment produzione su Linode VPS** ‚úÖ

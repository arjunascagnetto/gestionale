# TO-DO LIST PER IL PROGETTO DI GESTIONE PAGAMENTI

## âš¡ STATO ATTUALE DEL PROGETTO
**Ultima modifica:** 2025-10-09 (aggiornato)

### Sistema Operativo âœ…
- âœ… 90 pagamenti importati da Telegram (tutti in stato 'sospeso')
- âœ… 150 lezioni sincronizzate da Google Calendar (stato 'prevista')
- âœ… 20 studenti identificati e whitelist attiva
- âœ… Bot Telegram attivo con comandi /process, /suspended, /sync
- âœ… Sistema skip/suspended funzionante per evitare loop
- âœ… Interfaccia Web completa e funzionante con bugfix applicati
- âœ… Gestione abbonamenti (3/5/10 lezioni) e pagamenti parziali

### Statistiche Database (aggiornate)
- ðŸ“Š **Pagamenti**: 90 totali (tutti stato='sospeso', 0 abbinati ancora)
- ðŸ“Š **Lezioni**: 150 totali (tutte stato='prevista')
- ðŸ“Š **Associazioni**: 0 (pronte per essere create)
- ðŸ“Š **Abbinamenti**: 0 in pagamenti_lezioni

### Prossimi Passi Immediati
- [ ] Avviare bot Telegram per processare i 90 pagamenti storici
- [ ] Utilizzare interfaccia web per abbinamenti complessi
- [ ] Verificare tutte le lezioni vengono correttamente abbinate
- [ ] Testare workflow completo end-to-end con casi reali

---

## Configurazione e Setup iniziale
- [x] Creare l'ambiente di sviluppo (Python venv in .cal)
- [x] Impostare un sistema di controllo versione (Git)
- [x] Configurare l'accesso all'API di Telegram Bot (token in .env)
- [x] Configurare l'accesso a Google Calendar tramite Service Account
- [x] Creare Service Account su Google Cloud Console
- [x] Condividere calendario "Lezioni Russo" con service account
- [x] Testare accesso e lettura eventi (gcal_connect_test.py)
- [x] Progettare e creare lo schema del database

## Implementazione Database
- [x] Scegliere il database (SQLite)
- [x] Creare tabella 'pagamenti'
- [x] Creare tabella 'lezioni'
- [x] Creare tabella 'associazioni'
- [x] Creare tabella 'pagamenti_lezioni'
- [x] Configurare indici appropriati
- [x] Creare script di inizializzazione/migrazione DB (db_create_schema.py)
- [x] Aggiungere colonna 'skipped' a tabella pagamenti (per gestire loop)

## Sviluppo componente 1: Ingestore Pagamenti (telegram_ingestor.py)
- [x] Implementare connessione API Telegram (Telethon User API)
- [x] Configurare autenticazione Telegram (API_ID, API_HASH, phone, password)
- [x] Sviluppare logica di parsing dei messaggi da Telegram (regex per SMS banca russa)
- [x] Implementare meccanismo di estrazione dati (nome_pagante, giorno, ora, somma)
- [x] Creare sistema di deduplicazione basato su message ID (fonte_msg_id unique)
- [x] Implementare inserimento/aggiornamento nel DB con stato='sospeso'
- [x] Creare whitelist mittenti validi (mittenti_whitelist.csv)
- [x] Implementare filtro per escludere pagamenti da non-studenti
- [x] Gestire parsing importi con spazi (es. "10 000")
- [x] Aggiungere logging su console
- [ ] Aggiungere logging su file
- [ ] Creare unit test

## Sviluppo componente 2: Sincronizzatore Lezioni âœ…
- [x] Implementare connessione a Google Calendar per leggere il calendario "Lezioni Russo"
- [x] Testare lettura eventi con date e orari (gcal_connect_test.py)
- [x] Sviluppare logica per estrarre nome_studente e dettagli lezione
- [x] Implementare inserimento/aggiornamento lezioni nel DB (sync_lessons_from_calendar)
- [x] Creare sistema di deduplicazione basato su event_id (nextcloud_event_id UNIQUE)
- [x] Gestire eventi ricorrenti vs singoli (singleEvents=True)
- [x] Filtraggio lezioni solo dal passato fino a oggi (no lezioni future)
- [x] Aggiungere logging appropriato
- [x] Integrato nel bot come comando /sync
- [ ] Creare unit test

## Sviluppo componente 3: Risolutore di Associazioni (association_resolver.py) âœ…
- [x] Implementare sistema di ricerca nelle associazioni esistenti
- [x] Sviluppare logica per recuperare lezioni Â±3 giorni dalla data pagamento
- [x] Creare meccanismo per generare scelte multiple su Telegram (inline keyboard)
- [x] Implementare callback handler per le selezioni utente
- [x] Sviluppare logica per salvare associazioni studente-pagante
- [x] Implementare riuso automatico delle associazioni esistenti
- [x] Implementare processing sequenziale (un pagamento alla volta)
- [x] Implementare auto-avanzamento al prossimo pagamento dopo azione utente
- [x] Creare sistema skip/suspended per evitare loop
- [x] Implementare comando /process per pagamenti non-skipped
- [x] Implementare comando /suspended per pagamenti skipped
- [x] Implementare comando /sync per sincronizzare lezioni da Calendar
- [x] Aggiungere logging su file (association_resolver.log)
- [x] Creare utility fuzzy matching (utils/name_matcher.py - attualmente non usato)
- [x] Implementare rilevamento automatico abbonamenti (3/5/10 lezioni)
- [x] Supporto pagamenti parziali per lezioni condivise
- [x] Gestione quota_usata in tabella pagamenti_lezioni
- [ ] Gestire validitÃ  temporale delle associazioni (valid_from, valid_to)
- [ ] Creare unit test

## Sviluppo componente 4: Interfaccia Web Abbinamento Manuale âœ…
- [x] Creare interfaccia Flask (web_interface/app.py)
- [x] Vista a 2 colonne: lezioni non pagate vs pagamenti disponibili
- [x] Ordinamento indipendente per data crescente/decrescente
- [x] Selezione multipla con checkbox
- [x] Calcolo automatico bilancio crediti-debiti in real-time
- [x] Pulsante CONFERMA ABBINAMENTO (attivo solo se bilancio â‰¥ 0)
- [x] Distribuzione automatica pagamenti su lezioni multiple
- [x] Gestione abbonamenti e pagamenti parziali
- [x] Sezione ABBINAMENTI COMPLETATI con pulsante elimina
- [x] Query calcolo residuo pagamenti (COALESCE SUM quota_usata)
- [x] Aggiornamento automatico stato pagamenti
- [x] Salvataggio associazioni studente-pagante
- [x] Gestione errori SQL con try-except e rollback
- [x] Bugfix: INSERT ON CONFLICT per update associazioni
- [x] Bugfix: UPDATE quota_usata per abbinamenti esistenti
- [x] Template HTML con Tailwind CSS
- [ ] Aggiungere autenticazione con password
- [ ] Implementare filtri per studente/data
- [ ] Creare unit test

## Struttura del Progetto âœ…
- [x] Organizzare il codice in moduli (telegram_ingestor, association_resolver, web_interface)
- [x] Separare utility in cartella utils/ (name_matcher.py)
- [x] File .env per configurazione credenziali
- [x] File .gitignore per proteggere dati sensibili
- [ ] Creare file requirements.txt consolidato con tutte le dipendenze
- [ ] Documentare struttura cartelle in README principale

## Pianificazione ed Orchestrazione
- [ ] Configurare scheduler per eseguire i componenti in sequenza
- [ ] Impostare orari corretti (8:00, 8:02, 8:05 MSK)
- [ ] Gestire configurazione del fuso orario
- [ ] Implementare controlli di dipendenza tra componenti

## Documentazione
- [ ] Documentare API e interfacce
- [ ] Creare documentazione per l'utente
- [ ] Documentare procedure di backup/ripristino
- [ ] Creare diagrammi di flusso aggiornati

## Testing e QA
- [ ] Creare test di integrazione
- [ ] Implementare test di sistema end-to-end
- [ ] Testare scenari di errore e recovery
- [ ] Verificare performance sotto carico

## Monitoring e Manutenzione
- [ ] Implementare dashboard di monitoraggio
- [ ] Configurare sistema di allarmi
- [ ] Creare meccanismo di backup automatico
- [ ] Implementare strumenti di manutenzione DB

## Deployment
- [ ] Preparare ambiente di produzione
- [ ] Configurare deployment automatizzato
- [ ] Implementare strategia di rollback
- [ ] Eseguire migrazione iniziale dati (se necessario)
